#include  "/PluginShaders/SDFsLibrary.ush"



//--------------------- common parameters --------------------
//
//pGeometryType
	// 0-sdSphere
	// 1-sdBox
	// 2-sdRoundBox
	// 3-sdTorus
	// 4-sdLink
	// 5-sdCappedCylinder
	// 6-sdCone
	// 7-sdCapsule
//pMaxSteps 
//pWorldPosition
//pObjectPosition
//pCameraPosition
//pDisThreshold
//pSceneDepth
//pCameraVector
//
//---------------------- geometry parameters ------------------
//0-sdSphere  pSphereRadius 
//1-sdBox  pBoxDimension
//2-sdRoundBox pBoxDimension, pRound
//3-sdTorus  pTorusDimension
//4-sdLink pLinkLength, pLinkRadius1, pLinkRadius2
//5-sdCappedCylinder pCylinderRadius, pCylinderLength
//6-sdCone pConeAngle,pConeLength
//7-sdCapsule pCapsuleDimension1, pCapsuleDimension2, pCapsuleRadius

SDFs sdfLibrary;
float4 col = 0;
float3 pos = pWorldPosition;
float3 normal = 0;



for (int i = 0; i < pMaxSteps; i++)
{
	if(pSceneDepth < length(pos - pCameraPosition)) 
	break;


	
	float dist = sdfLibrary.sdByType(pos - pObjectPosition, pGeometryType,
				pSphereRadius,
				pBoxDimension,
				pRound,
				pTorusDimension,
				pLinkLength, pLinkRadius1, pLinkRadius2,
				pCylinderRadius, pCylinderLength,
				pConeAngle, pConeLength,
				pCapsuleDimension1, pCapsuleDimension2, pCapsuleRadius);

	
    if(dist < pDisThreshold)
    {
        col = float4(1, 0,0,1);
		
		
		normal = sdfLibrary.sdNormalByType(pos - pObjectPosition, pGeometryType,
				pSphereRadius,
				pBoxDimension,
				pRound,
				pTorusDimension,
				pLinkLength, pLinkRadius1, pLinkRadius2,
				pCylinderRadius, pCylinderLength,
				pConeAngle, pConeLength,
				pCapsuleDimension1, pCapsuleDimension2, pCapsuleRadius);
				
		
		
        break;
    }
    pos += pCameraVector * dist;//need
   
}

return float4(normal, col.a);